{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name caos-game-cljs.core, :imports nil, :requires {q quil.core, quil.core quil.core}, :uses nil, :defs {points-radius {:name caos-game-cljs.core/points-radius, :file "src/caos_game_cljs/core.cljs", :line 8, :column 1, :end-line 8, :end-column 19, :meta {:file "/home/leonardo/Desktop/clojure/chaos/caos-game-cljs/src/caos_game_cljs/core.cljs", :line 8, :column 6, :end-line 8, :end-column 19}, :tag number}, draw-state {:protocol-inline nil, :meta {:file "/home/leonardo/Desktop/clojure/chaos/caos-game-cljs/src/caos_game_cljs/core.cljs", :line 49, :column 7, :end-line 49, :end-column 17, :arglists (quote ([]))}, :name caos-game-cljs.core/draw-state, :variadic false, :file "src/caos_game_cljs/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, init-points {:protocol-inline nil, :meta {:file "/home/leonardo/Desktop/clojure/chaos/caos-game-cljs/src/caos_game_cljs/core.cljs", :line 11, :column 7, :end-line 11, :end-column 18, :arglists (quote ([]))}, :name caos-game-cljs.core/init-points, :variadic false, :file "src/caos_game_cljs/core.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, caos-game-cljs {:protocol-inline nil, :meta {:file "/home/leonardo/Desktop/clojure/chaos/caos-game-cljs/src/caos_game_cljs/core.cljs", :line 59, :column 14, :end-line 59, :end-column 28, :export true, :arglists (quote ([]))}, :name caos-game-cljs.core/caos-game-cljs, :variadic false, :file "src/caos_game_cljs/core.cljs", :end-column 28, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, middle-point {:protocol-inline nil, :meta {:file "/home/leonardo/Desktop/clojure/chaos/caos-game-cljs/src/caos_game_cljs/core.cljs", :line 29, :column 7, :end-line 29, :end-column 19, :arglists (quote ([p q]))}, :name caos-game-cljs.core/middle-point, :variadic false, :file "src/caos_game_cljs/core.cljs", :end-column 19, :method-params ([p q]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p q]))}, points-num {:name caos-game-cljs.core/points-num, :file "src/caos_game_cljs/core.cljs", :line 7, :column 1, :end-line 7, :end-column 16, :meta {:file "/home/leonardo/Desktop/clojure/chaos/caos-game-cljs/src/caos_game_cljs/core.cljs", :line 7, :column 6, :end-line 7, :end-column 16}, :tag number}, points-angle {:name caos-game-cljs.core/points-angle, :file "src/caos_game_cljs/core.cljs", :line 9, :column 1, :end-line 9, :end-column 18, :meta {:file "/home/leonardo/Desktop/clojure/chaos/caos-game-cljs/src/caos_game_cljs/core.cljs", :line 9, :column 6, :end-line 9, :end-column 18}, :tag number}, random-point {:name caos-game-cljs.core/random-point, :file "src/caos_game_cljs/core.cljs", :line 57, :column 4, :end-line 57, :end-column 21, :meta {:file "/home/leonardo/Desktop/clojure/chaos/caos-game-cljs/src/caos_game_cljs/core.cljs", :line 57, :column 9, :end-line 57, :end-column 21}, :tag any}, points {:name caos-game-cljs.core/points, :file "src/caos_game_cljs/core.cljs", :line 17, :column 1, :end-line 17, :end-column 12, :meta {:file "/home/leonardo/Desktop/clojure/chaos/caos-game-cljs/src/caos_game_cljs/core.cljs", :line 17, :column 6, :end-line 17, :end-column 12}, :tag any}, radius {:name caos-game-cljs.core/radius, :file "src/caos_game_cljs/core.cljs", :line 4, :column 1, :end-line 4, :end-column 12, :meta {:file "/home/leonardo/Desktop/clojure/chaos/caos-game-cljs/src/caos_game_cljs/core.cljs", :line 4, :column 6, :end-line 4, :end-column 12}, :tag number}, get-random-point-inside-circle {:protocol-inline nil, :meta {:file "/home/leonardo/Desktop/clojure/chaos/caos-game-cljs/src/caos_game_cljs/core.cljs", :line 22, :column 7, :end-line 22, :end-column 37, :arglists (quote ([]))}, :name caos-game-cljs.core/get-random-point-inside-circle, :variadic false, :file "src/caos_game_cljs/core.cljs", :end-column 37, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, size {:name caos-game-cljs.core/size, :file "src/caos_game_cljs/core.cljs", :line 5, :column 1, :end-line 5, :end-column 10, :meta {:file "/home/leonardo/Desktop/clojure/chaos/caos-game-cljs/src/caos_game_cljs/core.cljs", :line 5, :column 6, :end-line 5, :end-column 10}, :tag cljs.core/IVector}, setup {:protocol-inline nil, :meta {:file "/home/leonardo/Desktop/clojure/chaos/caos-game-cljs/src/caos_game_cljs/core.cljs", :line 41, :column 7, :end-line 41, :end-column 12, :arglists (quote ([]))}, :name caos-game-cljs.core/setup, :variadic false, :file "src/caos_game_cljs/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, get-random-point {:protocol-inline nil, :meta {:file "/home/leonardo/Desktop/clojure/chaos/caos-game-cljs/src/caos_game_cljs/core.cljs", :line 19, :column 7, :end-line 19, :end-column 23, :arglists (quote ([]))}, :name caos-game-cljs.core/get-random-point, :variadic false, :file "src/caos_game_cljs/core.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, reject-firsts {:protocol-inline nil, :meta {:file "/home/leonardo/Desktop/clojure/chaos/caos-game-cljs/src/caos_game_cljs/core.cljs", :line 32, :column 7, :end-line 32, :end-column 20, :arglists (quote ([]))}, :name caos-game-cljs.core/reject-firsts, :variadic false, :file "src/caos_game_cljs/core.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {q quil.core, quil.core quil.core}, :cljs.analyzer/constants {:seen #{:fn :size :title :setup :host :host-id :no-start :draw}, :order [:host :size :title :setup :draw :no-start :fn :host-id]}, :doc nil}